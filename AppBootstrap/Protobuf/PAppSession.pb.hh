// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PAppSession.proto

#ifndef PROTOBUF_PAppSession_2eproto__INCLUDED
#define PROTOBUF_PAppSession_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PAppSession_2eproto();
void protobuf_AssignDesc_PAppSession_2eproto();
void protobuf_ShutdownFile_PAppSession_2eproto();

class PAppSession;

// ===================================================================

class PAppSession : public ::google::protobuf::Message {
 public:
  PAppSession();
  virtual ~PAppSession();

  PAppSession(const PAppSession& from);

  inline PAppSession& operator=(const PAppSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PAppSession& default_instance();

  void Swap(PAppSession* other);

  // implements Message ----------------------------------------------

  PAppSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PAppSession& from);
  void MergeFrom(const PAppSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sessionId = 1;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional string realName = 2;
  inline bool has_realname() const;
  inline void clear_realname();
  static const int kRealNameFieldNumber = 2;
  inline const ::std::string& realname() const;
  inline void set_realname(const ::std::string& value);
  inline void set_realname(const char* value);
  inline void set_realname(const char* value, size_t size);
  inline ::std::string* mutable_realname();
  inline ::std::string* release_realname();
  inline void set_allocated_realname(::std::string* realname);

  // optional string userName = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional int64 userId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string secret = 5;
  inline bool has_secret() const;
  inline void clear_secret();
  static const int kSecretFieldNumber = 5;
  inline const ::std::string& secret() const;
  inline void set_secret(const ::std::string& value);
  inline void set_secret(const char* value);
  inline void set_secret(const char* value, size_t size);
  inline ::std::string* mutable_secret();
  inline ::std::string* release_secret();
  inline void set_allocated_secret(::std::string* secret);

  // optional string signinDate = 6;
  inline bool has_signindate() const;
  inline void clear_signindate();
  static const int kSigninDateFieldNumber = 6;
  inline const ::std::string& signindate() const;
  inline void set_signindate(const ::std::string& value);
  inline void set_signindate(const char* value);
  inline void set_signindate(const char* value, size_t size);
  inline ::std::string* mutable_signindate();
  inline ::std::string* release_signindate();
  inline void set_allocated_signindate(::std::string* signindate);

  // optional string profileImageUrl = 7;
  inline bool has_profileimageurl() const;
  inline void clear_profileimageurl();
  static const int kProfileImageUrlFieldNumber = 7;
  inline const ::std::string& profileimageurl() const;
  inline void set_profileimageurl(const ::std::string& value);
  inline void set_profileimageurl(const char* value);
  inline void set_profileimageurl(const char* value, size_t size);
  inline ::std::string* mutable_profileimageurl();
  inline ::std::string* release_profileimageurl();
  inline void set_allocated_profileimageurl(::std::string* profileimageurl);

  // optional string appName = 8;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppNameFieldNumber = 8;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // optional string deviceName = 9;
  inline bool has_devicename() const;
  inline void clear_devicename();
  static const int kDeviceNameFieldNumber = 9;
  inline const ::std::string& devicename() const;
  inline void set_devicename(const ::std::string& value);
  inline void set_devicename(const char* value);
  inline void set_devicename(const char* value, size_t size);
  inline ::std::string* mutable_devicename();
  inline ::std::string* release_devicename();
  inline void set_allocated_devicename(::std::string* devicename);

  // optional string deviceScreenSize = 10;
  inline bool has_devicescreensize() const;
  inline void clear_devicescreensize();
  static const int kDeviceScreenSizeFieldNumber = 10;
  inline const ::std::string& devicescreensize() const;
  inline void set_devicescreensize(const ::std::string& value);
  inline void set_devicescreensize(const char* value);
  inline void set_devicescreensize(const char* value, size_t size);
  inline ::std::string* mutable_devicescreensize();
  inline ::std::string* release_devicescreensize();
  inline void set_allocated_devicescreensize(::std::string* devicescreensize);

  // optional string osName = 11;
  inline bool has_osname() const;
  inline void clear_osname();
  static const int kOsNameFieldNumber = 11;
  inline const ::std::string& osname() const;
  inline void set_osname(const ::std::string& value);
  inline void set_osname(const char* value);
  inline void set_osname(const char* value, size_t size);
  inline ::std::string* mutable_osname();
  inline ::std::string* release_osname();
  inline void set_allocated_osname(::std::string* osname);

  // optional string osVersion = 12;
  inline bool has_osversion() const;
  inline void clear_osversion();
  static const int kOsVersionFieldNumber = 12;
  inline const ::std::string& osversion() const;
  inline void set_osversion(const ::std::string& value);
  inline void set_osversion(const char* value);
  inline void set_osversion(const char* value, size_t size);
  inline ::std::string* mutable_osversion();
  inline ::std::string* release_osversion();
  inline void set_allocated_osversion(::std::string* osversion);

  // optional string packageVersion = 13;
  inline bool has_packageversion() const;
  inline void clear_packageversion();
  static const int kPackageVersionFieldNumber = 13;
  inline const ::std::string& packageversion() const;
  inline void set_packageversion(const ::std::string& value);
  inline void set_packageversion(const char* value);
  inline void set_packageversion(const char* value, size_t size);
  inline ::std::string* mutable_packageversion();
  inline ::std::string* release_packageversion();
  inline void set_allocated_packageversion(::std::string* packageversion);

  // optional string packageName = 14;
  inline bool has_packagename() const;
  inline void clear_packagename();
  static const int kPackageNameFieldNumber = 14;
  inline const ::std::string& packagename() const;
  inline void set_packagename(const ::std::string& value);
  inline void set_packagename(const char* value);
  inline void set_packagename(const char* value, size_t size);
  inline ::std::string* mutable_packagename();
  inline ::std::string* release_packagename();
  inline void set_allocated_packagename(::std::string* packagename);

  // optional string deviceId = 15;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 15;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional string deviceToken = 16;
  inline bool has_devicetoken() const;
  inline void clear_devicetoken();
  static const int kDeviceTokenFieldNumber = 16;
  inline const ::std::string& devicetoken() const;
  inline void set_devicetoken(const ::std::string& value);
  inline void set_devicetoken(const char* value);
  inline void set_devicetoken(const char* value, size_t size);
  inline ::std::string* mutable_devicetoken();
  inline ::std::string* release_devicetoken();
  inline void set_allocated_devicetoken(::std::string* devicetoken);

  // optional int32 apnsEnabled = 17;
  inline bool has_apnsenabled() const;
  inline void clear_apnsenabled();
  static const int kApnsEnabledFieldNumber = 17;
  inline ::google::protobuf::int32 apnsenabled() const;
  inline void set_apnsenabled(::google::protobuf::int32 value);

  // optional string latesAppVers = 18;
  inline bool has_latesappvers() const;
  inline void clear_latesappvers();
  static const int kLatesAppVersFieldNumber = 18;
  inline const ::std::string& latesappvers() const;
  inline void set_latesappvers(const ::std::string& value);
  inline void set_latesappvers(const char* value);
  inline void set_latesappvers(const char* value, size_t size);
  inline ::std::string* mutable_latesappvers();
  inline ::std::string* release_latesappvers();
  inline void set_allocated_latesappvers(::std::string* latesappvers);

  // optional string localeIdentifier = 19;
  inline bool has_localeidentifier() const;
  inline void clear_localeidentifier();
  static const int kLocaleIdentifierFieldNumber = 19;
  inline const ::std::string& localeidentifier() const;
  inline void set_localeidentifier(const ::std::string& value);
  inline void set_localeidentifier(const char* value);
  inline void set_localeidentifier(const char* value, size_t size);
  inline ::std::string* mutable_localeidentifier();
  inline ::std::string* release_localeidentifier();
  inline void set_allocated_localeidentifier(::std::string* localeidentifier);

  // optional float latitude = 20;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 20;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional float longitude = 21;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 21;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional int32 cityId = 22;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 22;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);

  // optional int32 userKind = 23;
  inline bool has_userkind() const;
  inline void clear_userkind();
  static const int kUserKindFieldNumber = 23;
  inline ::google::protobuf::int32 userkind() const;
  inline void set_userkind(::google::protobuf::int32 value);

  // optional int32 userDemo = 24;
  inline bool has_userdemo() const;
  inline void clear_userdemo();
  static const int kUserDemoFieldNumber = 24;
  inline ::google::protobuf::int32 userdemo() const;
  inline void set_userdemo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PAppSession)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_realname();
  inline void clear_has_realname();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_secret();
  inline void clear_has_secret();
  inline void set_has_signindate();
  inline void clear_has_signindate();
  inline void set_has_profileimageurl();
  inline void clear_has_profileimageurl();
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_devicename();
  inline void clear_has_devicename();
  inline void set_has_devicescreensize();
  inline void clear_has_devicescreensize();
  inline void set_has_osname();
  inline void clear_has_osname();
  inline void set_has_osversion();
  inline void clear_has_osversion();
  inline void set_has_packageversion();
  inline void clear_has_packageversion();
  inline void set_has_packagename();
  inline void clear_has_packagename();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_devicetoken();
  inline void clear_has_devicetoken();
  inline void set_has_apnsenabled();
  inline void clear_has_apnsenabled();
  inline void set_has_latesappvers();
  inline void clear_has_latesappvers();
  inline void set_has_localeidentifier();
  inline void clear_has_localeidentifier();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_userkind();
  inline void clear_has_userkind();
  inline void set_has_userdemo();
  inline void clear_has_userdemo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sessionid_;
  ::std::string* realname_;
  ::std::string* username_;
  ::google::protobuf::int64 userid_;
  ::std::string* secret_;
  ::std::string* signindate_;
  ::std::string* profileimageurl_;
  ::std::string* appname_;
  ::std::string* devicename_;
  ::std::string* devicescreensize_;
  ::std::string* osname_;
  ::std::string* osversion_;
  ::std::string* packageversion_;
  ::std::string* packagename_;
  ::std::string* deviceid_;
  ::std::string* devicetoken_;
  ::std::string* latesappvers_;
  ::google::protobuf::int32 apnsenabled_;
  float latitude_;
  ::std::string* localeidentifier_;
  float longitude_;
  ::google::protobuf::int32 cityid_;
  ::google::protobuf::int32 userkind_;
  ::google::protobuf::int32 userdemo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_PAppSession_2eproto();
  friend void protobuf_AssignDesc_PAppSession_2eproto();
  friend void protobuf_ShutdownFile_PAppSession_2eproto();

  void InitAsDefaultInstance();
  static PAppSession* default_instance_;
};
// ===================================================================


// ===================================================================

// PAppSession

// optional string sessionId = 1;
inline bool PAppSession::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PAppSession::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PAppSession::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PAppSession::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& PAppSession::sessionid() const {
  return *sessionid_;
}
inline void PAppSession::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void PAppSession::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void PAppSession::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}
inline ::std::string* PAppSession::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string realName = 2;
inline bool PAppSession::has_realname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PAppSession::set_has_realname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PAppSession::clear_has_realname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PAppSession::clear_realname() {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    realname_->clear();
  }
  clear_has_realname();
}
inline const ::std::string& PAppSession::realname() const {
  return *realname_;
}
inline void PAppSession::set_realname(const ::std::string& value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void PAppSession::set_realname(const char* value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void PAppSession::set_realname(const char* value, size_t size) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_realname() {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  return realname_;
}
inline ::std::string* PAppSession::release_realname() {
  clear_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realname_;
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_realname(::std::string* realname) {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (realname) {
    set_has_realname();
    realname_ = realname;
  } else {
    clear_has_realname();
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string userName = 3;
inline bool PAppSession::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PAppSession::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PAppSession::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PAppSession::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PAppSession::username() const {
  return *username_;
}
inline void PAppSession::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PAppSession::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PAppSession::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PAppSession::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 userId = 4;
inline bool PAppSession::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PAppSession::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PAppSession::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PAppSession::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 PAppSession::userid() const {
  return userid_;
}
inline void PAppSession::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string secret = 5;
inline bool PAppSession::has_secret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PAppSession::set_has_secret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PAppSession::clear_has_secret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PAppSession::clear_secret() {
  if (secret_ != &::google::protobuf::internal::kEmptyString) {
    secret_->clear();
  }
  clear_has_secret();
}
inline const ::std::string& PAppSession::secret() const {
  return *secret_;
}
inline void PAppSession::set_secret(const ::std::string& value) {
  set_has_secret();
  if (secret_ == &::google::protobuf::internal::kEmptyString) {
    secret_ = new ::std::string;
  }
  secret_->assign(value);
}
inline void PAppSession::set_secret(const char* value) {
  set_has_secret();
  if (secret_ == &::google::protobuf::internal::kEmptyString) {
    secret_ = new ::std::string;
  }
  secret_->assign(value);
}
inline void PAppSession::set_secret(const char* value, size_t size) {
  set_has_secret();
  if (secret_ == &::google::protobuf::internal::kEmptyString) {
    secret_ = new ::std::string;
  }
  secret_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_secret() {
  set_has_secret();
  if (secret_ == &::google::protobuf::internal::kEmptyString) {
    secret_ = new ::std::string;
  }
  return secret_;
}
inline ::std::string* PAppSession::release_secret() {
  clear_has_secret();
  if (secret_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secret_;
    secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_secret(::std::string* secret) {
  if (secret_ != &::google::protobuf::internal::kEmptyString) {
    delete secret_;
  }
  if (secret) {
    set_has_secret();
    secret_ = secret;
  } else {
    clear_has_secret();
    secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string signinDate = 6;
inline bool PAppSession::has_signindate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PAppSession::set_has_signindate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PAppSession::clear_has_signindate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PAppSession::clear_signindate() {
  if (signindate_ != &::google::protobuf::internal::kEmptyString) {
    signindate_->clear();
  }
  clear_has_signindate();
}
inline const ::std::string& PAppSession::signindate() const {
  return *signindate_;
}
inline void PAppSession::set_signindate(const ::std::string& value) {
  set_has_signindate();
  if (signindate_ == &::google::protobuf::internal::kEmptyString) {
    signindate_ = new ::std::string;
  }
  signindate_->assign(value);
}
inline void PAppSession::set_signindate(const char* value) {
  set_has_signindate();
  if (signindate_ == &::google::protobuf::internal::kEmptyString) {
    signindate_ = new ::std::string;
  }
  signindate_->assign(value);
}
inline void PAppSession::set_signindate(const char* value, size_t size) {
  set_has_signindate();
  if (signindate_ == &::google::protobuf::internal::kEmptyString) {
    signindate_ = new ::std::string;
  }
  signindate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_signindate() {
  set_has_signindate();
  if (signindate_ == &::google::protobuf::internal::kEmptyString) {
    signindate_ = new ::std::string;
  }
  return signindate_;
}
inline ::std::string* PAppSession::release_signindate() {
  clear_has_signindate();
  if (signindate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signindate_;
    signindate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_signindate(::std::string* signindate) {
  if (signindate_ != &::google::protobuf::internal::kEmptyString) {
    delete signindate_;
  }
  if (signindate) {
    set_has_signindate();
    signindate_ = signindate;
  } else {
    clear_has_signindate();
    signindate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string profileImageUrl = 7;
inline bool PAppSession::has_profileimageurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PAppSession::set_has_profileimageurl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PAppSession::clear_has_profileimageurl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PAppSession::clear_profileimageurl() {
  if (profileimageurl_ != &::google::protobuf::internal::kEmptyString) {
    profileimageurl_->clear();
  }
  clear_has_profileimageurl();
}
inline const ::std::string& PAppSession::profileimageurl() const {
  return *profileimageurl_;
}
inline void PAppSession::set_profileimageurl(const ::std::string& value) {
  set_has_profileimageurl();
  if (profileimageurl_ == &::google::protobuf::internal::kEmptyString) {
    profileimageurl_ = new ::std::string;
  }
  profileimageurl_->assign(value);
}
inline void PAppSession::set_profileimageurl(const char* value) {
  set_has_profileimageurl();
  if (profileimageurl_ == &::google::protobuf::internal::kEmptyString) {
    profileimageurl_ = new ::std::string;
  }
  profileimageurl_->assign(value);
}
inline void PAppSession::set_profileimageurl(const char* value, size_t size) {
  set_has_profileimageurl();
  if (profileimageurl_ == &::google::protobuf::internal::kEmptyString) {
    profileimageurl_ = new ::std::string;
  }
  profileimageurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_profileimageurl() {
  set_has_profileimageurl();
  if (profileimageurl_ == &::google::protobuf::internal::kEmptyString) {
    profileimageurl_ = new ::std::string;
  }
  return profileimageurl_;
}
inline ::std::string* PAppSession::release_profileimageurl() {
  clear_has_profileimageurl();
  if (profileimageurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = profileimageurl_;
    profileimageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_profileimageurl(::std::string* profileimageurl) {
  if (profileimageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete profileimageurl_;
  }
  if (profileimageurl) {
    set_has_profileimageurl();
    profileimageurl_ = profileimageurl;
  } else {
    clear_has_profileimageurl();
    profileimageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appName = 8;
inline bool PAppSession::has_appname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PAppSession::set_has_appname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PAppSession::clear_has_appname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PAppSession::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& PAppSession::appname() const {
  return *appname_;
}
inline void PAppSession::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void PAppSession::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void PAppSession::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* PAppSession::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceName = 9;
inline bool PAppSession::has_devicename() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PAppSession::set_has_devicename() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PAppSession::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PAppSession::clear_devicename() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    devicename_->clear();
  }
  clear_has_devicename();
}
inline const ::std::string& PAppSession::devicename() const {
  return *devicename_;
}
inline void PAppSession::set_devicename(const ::std::string& value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void PAppSession::set_devicename(const char* value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void PAppSession::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_devicename() {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  return devicename_;
}
inline ::std::string* PAppSession::release_devicename() {
  clear_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicename_;
    devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_devicename(::std::string* devicename) {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (devicename) {
    set_has_devicename();
    devicename_ = devicename;
  } else {
    clear_has_devicename();
    devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceScreenSize = 10;
inline bool PAppSession::has_devicescreensize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PAppSession::set_has_devicescreensize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PAppSession::clear_has_devicescreensize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PAppSession::clear_devicescreensize() {
  if (devicescreensize_ != &::google::protobuf::internal::kEmptyString) {
    devicescreensize_->clear();
  }
  clear_has_devicescreensize();
}
inline const ::std::string& PAppSession::devicescreensize() const {
  return *devicescreensize_;
}
inline void PAppSession::set_devicescreensize(const ::std::string& value) {
  set_has_devicescreensize();
  if (devicescreensize_ == &::google::protobuf::internal::kEmptyString) {
    devicescreensize_ = new ::std::string;
  }
  devicescreensize_->assign(value);
}
inline void PAppSession::set_devicescreensize(const char* value) {
  set_has_devicescreensize();
  if (devicescreensize_ == &::google::protobuf::internal::kEmptyString) {
    devicescreensize_ = new ::std::string;
  }
  devicescreensize_->assign(value);
}
inline void PAppSession::set_devicescreensize(const char* value, size_t size) {
  set_has_devicescreensize();
  if (devicescreensize_ == &::google::protobuf::internal::kEmptyString) {
    devicescreensize_ = new ::std::string;
  }
  devicescreensize_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_devicescreensize() {
  set_has_devicescreensize();
  if (devicescreensize_ == &::google::protobuf::internal::kEmptyString) {
    devicescreensize_ = new ::std::string;
  }
  return devicescreensize_;
}
inline ::std::string* PAppSession::release_devicescreensize() {
  clear_has_devicescreensize();
  if (devicescreensize_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicescreensize_;
    devicescreensize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_devicescreensize(::std::string* devicescreensize) {
  if (devicescreensize_ != &::google::protobuf::internal::kEmptyString) {
    delete devicescreensize_;
  }
  if (devicescreensize) {
    set_has_devicescreensize();
    devicescreensize_ = devicescreensize;
  } else {
    clear_has_devicescreensize();
    devicescreensize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string osName = 11;
inline bool PAppSession::has_osname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PAppSession::set_has_osname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PAppSession::clear_has_osname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PAppSession::clear_osname() {
  if (osname_ != &::google::protobuf::internal::kEmptyString) {
    osname_->clear();
  }
  clear_has_osname();
}
inline const ::std::string& PAppSession::osname() const {
  return *osname_;
}
inline void PAppSession::set_osname(const ::std::string& value) {
  set_has_osname();
  if (osname_ == &::google::protobuf::internal::kEmptyString) {
    osname_ = new ::std::string;
  }
  osname_->assign(value);
}
inline void PAppSession::set_osname(const char* value) {
  set_has_osname();
  if (osname_ == &::google::protobuf::internal::kEmptyString) {
    osname_ = new ::std::string;
  }
  osname_->assign(value);
}
inline void PAppSession::set_osname(const char* value, size_t size) {
  set_has_osname();
  if (osname_ == &::google::protobuf::internal::kEmptyString) {
    osname_ = new ::std::string;
  }
  osname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_osname() {
  set_has_osname();
  if (osname_ == &::google::protobuf::internal::kEmptyString) {
    osname_ = new ::std::string;
  }
  return osname_;
}
inline ::std::string* PAppSession::release_osname() {
  clear_has_osname();
  if (osname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = osname_;
    osname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_osname(::std::string* osname) {
  if (osname_ != &::google::protobuf::internal::kEmptyString) {
    delete osname_;
  }
  if (osname) {
    set_has_osname();
    osname_ = osname;
  } else {
    clear_has_osname();
    osname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string osVersion = 12;
inline bool PAppSession::has_osversion() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PAppSession::set_has_osversion() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PAppSession::clear_has_osversion() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PAppSession::clear_osversion() {
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    osversion_->clear();
  }
  clear_has_osversion();
}
inline const ::std::string& PAppSession::osversion() const {
  return *osversion_;
}
inline void PAppSession::set_osversion(const ::std::string& value) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(value);
}
inline void PAppSession::set_osversion(const char* value) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(value);
}
inline void PAppSession::set_osversion(const char* value, size_t size) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_osversion() {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  return osversion_;
}
inline ::std::string* PAppSession::release_osversion() {
  clear_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = osversion_;
    osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_osversion(::std::string* osversion) {
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    delete osversion_;
  }
  if (osversion) {
    set_has_osversion();
    osversion_ = osversion;
  } else {
    clear_has_osversion();
    osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string packageVersion = 13;
inline bool PAppSession::has_packageversion() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PAppSession::set_has_packageversion() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PAppSession::clear_has_packageversion() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PAppSession::clear_packageversion() {
  if (packageversion_ != &::google::protobuf::internal::kEmptyString) {
    packageversion_->clear();
  }
  clear_has_packageversion();
}
inline const ::std::string& PAppSession::packageversion() const {
  return *packageversion_;
}
inline void PAppSession::set_packageversion(const ::std::string& value) {
  set_has_packageversion();
  if (packageversion_ == &::google::protobuf::internal::kEmptyString) {
    packageversion_ = new ::std::string;
  }
  packageversion_->assign(value);
}
inline void PAppSession::set_packageversion(const char* value) {
  set_has_packageversion();
  if (packageversion_ == &::google::protobuf::internal::kEmptyString) {
    packageversion_ = new ::std::string;
  }
  packageversion_->assign(value);
}
inline void PAppSession::set_packageversion(const char* value, size_t size) {
  set_has_packageversion();
  if (packageversion_ == &::google::protobuf::internal::kEmptyString) {
    packageversion_ = new ::std::string;
  }
  packageversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_packageversion() {
  set_has_packageversion();
  if (packageversion_ == &::google::protobuf::internal::kEmptyString) {
    packageversion_ = new ::std::string;
  }
  return packageversion_;
}
inline ::std::string* PAppSession::release_packageversion() {
  clear_has_packageversion();
  if (packageversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packageversion_;
    packageversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_packageversion(::std::string* packageversion) {
  if (packageversion_ != &::google::protobuf::internal::kEmptyString) {
    delete packageversion_;
  }
  if (packageversion) {
    set_has_packageversion();
    packageversion_ = packageversion;
  } else {
    clear_has_packageversion();
    packageversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string packageName = 14;
inline bool PAppSession::has_packagename() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PAppSession::set_has_packagename() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PAppSession::clear_has_packagename() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PAppSession::clear_packagename() {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    packagename_->clear();
  }
  clear_has_packagename();
}
inline const ::std::string& PAppSession::packagename() const {
  return *packagename_;
}
inline void PAppSession::set_packagename(const ::std::string& value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void PAppSession::set_packagename(const char* value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void PAppSession::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_packagename() {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  return packagename_;
}
inline ::std::string* PAppSession::release_packagename() {
  clear_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packagename_;
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_packagename(::std::string* packagename) {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (packagename) {
    set_has_packagename();
    packagename_ = packagename;
  } else {
    clear_has_packagename();
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceId = 15;
inline bool PAppSession::has_deviceid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PAppSession::set_has_deviceid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PAppSession::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PAppSession::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& PAppSession::deviceid() const {
  return *deviceid_;
}
inline void PAppSession::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void PAppSession::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void PAppSession::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* PAppSession::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceToken = 16;
inline bool PAppSession::has_devicetoken() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PAppSession::set_has_devicetoken() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PAppSession::clear_has_devicetoken() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PAppSession::clear_devicetoken() {
  if (devicetoken_ != &::google::protobuf::internal::kEmptyString) {
    devicetoken_->clear();
  }
  clear_has_devicetoken();
}
inline const ::std::string& PAppSession::devicetoken() const {
  return *devicetoken_;
}
inline void PAppSession::set_devicetoken(const ::std::string& value) {
  set_has_devicetoken();
  if (devicetoken_ == &::google::protobuf::internal::kEmptyString) {
    devicetoken_ = new ::std::string;
  }
  devicetoken_->assign(value);
}
inline void PAppSession::set_devicetoken(const char* value) {
  set_has_devicetoken();
  if (devicetoken_ == &::google::protobuf::internal::kEmptyString) {
    devicetoken_ = new ::std::string;
  }
  devicetoken_->assign(value);
}
inline void PAppSession::set_devicetoken(const char* value, size_t size) {
  set_has_devicetoken();
  if (devicetoken_ == &::google::protobuf::internal::kEmptyString) {
    devicetoken_ = new ::std::string;
  }
  devicetoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_devicetoken() {
  set_has_devicetoken();
  if (devicetoken_ == &::google::protobuf::internal::kEmptyString) {
    devicetoken_ = new ::std::string;
  }
  return devicetoken_;
}
inline ::std::string* PAppSession::release_devicetoken() {
  clear_has_devicetoken();
  if (devicetoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicetoken_;
    devicetoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_devicetoken(::std::string* devicetoken) {
  if (devicetoken_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetoken_;
  }
  if (devicetoken) {
    set_has_devicetoken();
    devicetoken_ = devicetoken;
  } else {
    clear_has_devicetoken();
    devicetoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 apnsEnabled = 17;
inline bool PAppSession::has_apnsenabled() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PAppSession::set_has_apnsenabled() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PAppSession::clear_has_apnsenabled() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PAppSession::clear_apnsenabled() {
  apnsenabled_ = 0;
  clear_has_apnsenabled();
}
inline ::google::protobuf::int32 PAppSession::apnsenabled() const {
  return apnsenabled_;
}
inline void PAppSession::set_apnsenabled(::google::protobuf::int32 value) {
  set_has_apnsenabled();
  apnsenabled_ = value;
}

// optional string latesAppVers = 18;
inline bool PAppSession::has_latesappvers() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PAppSession::set_has_latesappvers() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PAppSession::clear_has_latesappvers() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PAppSession::clear_latesappvers() {
  if (latesappvers_ != &::google::protobuf::internal::kEmptyString) {
    latesappvers_->clear();
  }
  clear_has_latesappvers();
}
inline const ::std::string& PAppSession::latesappvers() const {
  return *latesappvers_;
}
inline void PAppSession::set_latesappvers(const ::std::string& value) {
  set_has_latesappvers();
  if (latesappvers_ == &::google::protobuf::internal::kEmptyString) {
    latesappvers_ = new ::std::string;
  }
  latesappvers_->assign(value);
}
inline void PAppSession::set_latesappvers(const char* value) {
  set_has_latesappvers();
  if (latesappvers_ == &::google::protobuf::internal::kEmptyString) {
    latesappvers_ = new ::std::string;
  }
  latesappvers_->assign(value);
}
inline void PAppSession::set_latesappvers(const char* value, size_t size) {
  set_has_latesappvers();
  if (latesappvers_ == &::google::protobuf::internal::kEmptyString) {
    latesappvers_ = new ::std::string;
  }
  latesappvers_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_latesappvers() {
  set_has_latesappvers();
  if (latesappvers_ == &::google::protobuf::internal::kEmptyString) {
    latesappvers_ = new ::std::string;
  }
  return latesappvers_;
}
inline ::std::string* PAppSession::release_latesappvers() {
  clear_has_latesappvers();
  if (latesappvers_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latesappvers_;
    latesappvers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_latesappvers(::std::string* latesappvers) {
  if (latesappvers_ != &::google::protobuf::internal::kEmptyString) {
    delete latesappvers_;
  }
  if (latesappvers) {
    set_has_latesappvers();
    latesappvers_ = latesappvers;
  } else {
    clear_has_latesappvers();
    latesappvers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string localeIdentifier = 19;
inline bool PAppSession::has_localeidentifier() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PAppSession::set_has_localeidentifier() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PAppSession::clear_has_localeidentifier() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PAppSession::clear_localeidentifier() {
  if (localeidentifier_ != &::google::protobuf::internal::kEmptyString) {
    localeidentifier_->clear();
  }
  clear_has_localeidentifier();
}
inline const ::std::string& PAppSession::localeidentifier() const {
  return *localeidentifier_;
}
inline void PAppSession::set_localeidentifier(const ::std::string& value) {
  set_has_localeidentifier();
  if (localeidentifier_ == &::google::protobuf::internal::kEmptyString) {
    localeidentifier_ = new ::std::string;
  }
  localeidentifier_->assign(value);
}
inline void PAppSession::set_localeidentifier(const char* value) {
  set_has_localeidentifier();
  if (localeidentifier_ == &::google::protobuf::internal::kEmptyString) {
    localeidentifier_ = new ::std::string;
  }
  localeidentifier_->assign(value);
}
inline void PAppSession::set_localeidentifier(const char* value, size_t size) {
  set_has_localeidentifier();
  if (localeidentifier_ == &::google::protobuf::internal::kEmptyString) {
    localeidentifier_ = new ::std::string;
  }
  localeidentifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppSession::mutable_localeidentifier() {
  set_has_localeidentifier();
  if (localeidentifier_ == &::google::protobuf::internal::kEmptyString) {
    localeidentifier_ = new ::std::string;
  }
  return localeidentifier_;
}
inline ::std::string* PAppSession::release_localeidentifier() {
  clear_has_localeidentifier();
  if (localeidentifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localeidentifier_;
    localeidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppSession::set_allocated_localeidentifier(::std::string* localeidentifier) {
  if (localeidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete localeidentifier_;
  }
  if (localeidentifier) {
    set_has_localeidentifier();
    localeidentifier_ = localeidentifier;
  } else {
    clear_has_localeidentifier();
    localeidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float latitude = 20;
inline bool PAppSession::has_latitude() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PAppSession::set_has_latitude() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PAppSession::clear_has_latitude() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PAppSession::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float PAppSession::latitude() const {
  return latitude_;
}
inline void PAppSession::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
}

// optional float longitude = 21;
inline bool PAppSession::has_longitude() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PAppSession::set_has_longitude() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PAppSession::clear_has_longitude() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PAppSession::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float PAppSession::longitude() const {
  return longitude_;
}
inline void PAppSession::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
}

// optional int32 cityId = 22;
inline bool PAppSession::has_cityid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PAppSession::set_has_cityid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PAppSession::clear_has_cityid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PAppSession::clear_cityid() {
  cityid_ = 0;
  clear_has_cityid();
}
inline ::google::protobuf::int32 PAppSession::cityid() const {
  return cityid_;
}
inline void PAppSession::set_cityid(::google::protobuf::int32 value) {
  set_has_cityid();
  cityid_ = value;
}

// optional int32 userKind = 23;
inline bool PAppSession::has_userkind() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PAppSession::set_has_userkind() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PAppSession::clear_has_userkind() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PAppSession::clear_userkind() {
  userkind_ = 0;
  clear_has_userkind();
}
inline ::google::protobuf::int32 PAppSession::userkind() const {
  return userkind_;
}
inline void PAppSession::set_userkind(::google::protobuf::int32 value) {
  set_has_userkind();
  userkind_ = value;
}

// optional int32 userDemo = 24;
inline bool PAppSession::has_userdemo() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PAppSession::set_has_userdemo() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PAppSession::clear_has_userdemo() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PAppSession::clear_userdemo() {
  userdemo_ = 0;
  clear_has_userdemo();
}
inline ::google::protobuf::int32 PAppSession::userdemo() const {
  return userdemo_;
}
inline void PAppSession::set_userdemo(::google::protobuf::int32 value) {
  set_has_userdemo();
  userdemo_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PAppSession_2eproto__INCLUDED
