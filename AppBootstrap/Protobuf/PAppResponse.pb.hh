// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PAppResponse.proto

#ifndef PROTOBUF_PAppResponse_2eproto__INCLUDED
#define PROTOBUF_PAppResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PAppResponse_2eproto();
void protobuf_AssignDesc_PAppResponse_2eproto();
void protobuf_ShutdownFile_PAppResponse_2eproto();

class PAppResponse;

// ===================================================================

class PAppResponse : public ::google::protobuf::Message {
 public:
  PAppResponse();
  virtual ~PAppResponse();

  PAppResponse(const PAppResponse& from);

  inline PAppResponse& operator=(const PAppResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PAppResponse& default_instance();

  void Swap(PAppResponse* other);

  // implements Message ----------------------------------------------

  PAppResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PAppResponse& from);
  void MergeFrom(const PAppResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional string sessionId = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional int32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required int32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int32 total = 5;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 5;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // repeated bytes data = 6;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data(int index) const;
  inline ::std::string* mutable_data(int index);
  inline void set_data(int index, const ::std::string& value);
  inline void set_data(int index, const char* value);
  inline void set_data(int index, const void* value, size_t size);
  inline ::std::string* add_data();
  inline void add_data(const ::std::string& value);
  inline void add_data(const char* value);
  inline void add_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // repeated string errors = 7;
  inline int errors_size() const;
  inline void clear_errors();
  static const int kErrorsFieldNumber = 7;
  inline const ::std::string& errors(int index) const;
  inline ::std::string* mutable_errors(int index);
  inline void set_errors(int index, const ::std::string& value);
  inline void set_errors(int index, const char* value);
  inline void set_errors(int index, const char* value, size_t size);
  inline ::std::string* add_errors();
  inline void add_errors(const ::std::string& value);
  inline void add_errors(const char* value);
  inline void add_errors(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& errors() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_errors();

  // @@protoc_insertion_point(class_scope:PAppResponse)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::std::string* sessionid_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> errors_;
  ::google::protobuf::int32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PAppResponse_2eproto();
  friend void protobuf_AssignDesc_PAppResponse_2eproto();
  friend void protobuf_ShutdownFile_PAppResponse_2eproto();

  void InitAsDefaultInstance();
  static PAppResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// PAppResponse

// optional string msg = 1;
inline bool PAppResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PAppResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PAppResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PAppResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& PAppResponse::msg() const {
  return *msg_;
}
inline void PAppResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void PAppResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void PAppResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* PAppResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sessionId = 2;
inline bool PAppResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PAppResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PAppResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PAppResponse::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& PAppResponse::sessionid() const {
  return *sessionid_;
}
inline void PAppResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void PAppResponse::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void PAppResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppResponse::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}
inline ::std::string* PAppResponse::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 version = 3;
inline bool PAppResponse::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PAppResponse::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PAppResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PAppResponse::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 PAppResponse::version() const {
  return version_;
}
inline void PAppResponse::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// required int32 code = 4;
inline bool PAppResponse::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PAppResponse::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PAppResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PAppResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 PAppResponse::code() const {
  return code_;
}
inline void PAppResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int32 total = 5;
inline bool PAppResponse::has_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PAppResponse::set_has_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PAppResponse::clear_has_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PAppResponse::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 PAppResponse::total() const {
  return total_;
}
inline void PAppResponse::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// repeated bytes data = 6;
inline int PAppResponse::data_size() const {
  return data_.size();
}
inline void PAppResponse::clear_data() {
  data_.Clear();
}
inline const ::std::string& PAppResponse::data(int index) const {
  return data_.Get(index);
}
inline ::std::string* PAppResponse::mutable_data(int index) {
  return data_.Mutable(index);
}
inline void PAppResponse::set_data(int index, const ::std::string& value) {
  data_.Mutable(index)->assign(value);
}
inline void PAppResponse::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
}
inline void PAppResponse::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppResponse::add_data() {
  return data_.Add();
}
inline void PAppResponse::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
}
inline void PAppResponse::add_data(const char* value) {
  data_.Add()->assign(value);
}
inline void PAppResponse::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PAppResponse::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PAppResponse::mutable_data() {
  return &data_;
}

// repeated string errors = 7;
inline int PAppResponse::errors_size() const {
  return errors_.size();
}
inline void PAppResponse::clear_errors() {
  errors_.Clear();
}
inline const ::std::string& PAppResponse::errors(int index) const {
  return errors_.Get(index);
}
inline ::std::string* PAppResponse::mutable_errors(int index) {
  return errors_.Mutable(index);
}
inline void PAppResponse::set_errors(int index, const ::std::string& value) {
  errors_.Mutable(index)->assign(value);
}
inline void PAppResponse::set_errors(int index, const char* value) {
  errors_.Mutable(index)->assign(value);
}
inline void PAppResponse::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppResponse::add_errors() {
  return errors_.Add();
}
inline void PAppResponse::add_errors(const ::std::string& value) {
  errors_.Add()->assign(value);
}
inline void PAppResponse::add_errors(const char* value) {
  errors_.Add()->assign(value);
}
inline void PAppResponse::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PAppResponse::errors() const {
  return errors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PAppResponse::mutable_errors() {
  return &errors_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PAppResponse_2eproto__INCLUDED
